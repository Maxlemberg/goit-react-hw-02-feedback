{"version":3,"sources":["Components/App/Statistic/Statistic.jsx","Components/App/FeedbackOptions/FeedbackOptions.jsx","Components/App/Section/Section.jsx","Components/App/Notification/Notification.jsx","Components/App/App.jsx","index.js"],"names":["Statistics","good","neutral","bad","total","positive","FeedbackOptions","onHandleFn","type","onClick","Section","title","children","Notification","App","state","handleFn","e","setState","prevState","target","textContent","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Statistic","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAceA,EAZI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,SAA9B,OACjB,mCACE,+BACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,aCOSC,EAdS,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAH,OACtB,gCACE,wBAAQC,KAAK,SAASC,QAASF,EAA/B,kBAGA,wBAAQC,KAAK,SAASC,QAASF,EAA/B,qBAGA,wBAAQC,KAAK,SAASC,QAASF,EAA/B,qBCDWG,EAPC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,gCACE,6BAAKD,IACJC,MCFUC,EADM,kBAAM,mDCyEZC,E,4MApEbC,MAAQ,CACNd,KAAM,EACNC,QAAS,EACTC,IAAK,EACLC,MAAO,EACPC,SAAU,G,EAGZW,SAAW,SAACC,GACV,EAAKC,UAAS,SAACC,GACb,MAA6B,SAAzBF,EAAEG,OAAOC,YACJ,CACLpB,KAAMkB,EAAUlB,KAAO,GAGE,YAAzBgB,EAAEG,OAAOC,YACJ,CACLnB,QAASiB,EAAUjB,QAAU,GAG1B,CACLC,IAAKgB,EAAUhB,IAAM,MAGzB,EAAKmB,qBACL,EAAKC,mC,EAGPD,mBAAqB,kBACnB,EAAKJ,UAAS,SAACC,GACb,MAAO,CACLf,MAAOe,EAAUlB,KAAOkB,EAAUjB,QAAUiB,EAAUhB,S,EAI5DoB,gCAAkC,WAChC,EAAKL,UAAS,YAAsB,IAAnBjB,EAAkB,EAAlBA,KAAMG,EAAY,EAAZA,MACrB,MAAO,CACLC,SAAUmB,KAAKC,MAAOxB,EAAOG,EAAS,U,4CAK5C,WACE,OACE,qCACE,cAAC,EAAD,CAASO,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBJ,WAAYmB,KAAKV,aAGpC,cAAC,EAAD,CAASL,MAAM,aAAf,SACwB,IAArBe,KAAKX,MAAMX,MACV,cAAC,EAAD,IAEA,cAACuB,EAAD,CACE1B,KAAMyB,KAAKX,MAAMd,KACjBC,QAASwB,KAAKX,MAAMb,QACpBC,IAAKuB,KAAKX,MAAMZ,IAChBC,MAAOsB,KAAKX,MAAMX,MAClBC,SAAUqB,KAAKX,MAAMV,oB,GA5DjBuB,aCDlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.6b6695d7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positive }) => (\r\n  <>\r\n    <ul>\r\n      <li>Good:{good}</li>\r\n      <li>Neutral:{neutral}</li>\r\n      <li>Bad:{bad}</li>\r\n      <li>Total:{total}</li>\r\n      <li>Positive feedback:{positive}%</li>\r\n    </ul>\r\n  </>\r\n);\r\n\r\nexport default Statistics;\r\n","import React from \"react\";\r\n\r\nconst FeedbackOptions = ({ onHandleFn }) => (\r\n  <div>\r\n    <button type=\"button\" onClick={onHandleFn}>\r\n      Good\r\n    </button>\r\n    <button type=\"button\" onClick={onHandleFn}>\r\n      Neutral\r\n    </button>\r\n    <button type=\"button\" onClick={onHandleFn}>\r\n      Bad\r\n    </button>\r\n  </div>\r\n);\r\n\r\nexport default FeedbackOptions;\r\n","import React from \"react\";\r\n\r\nconst Section = ({ title, children }) => (\r\n  <div>\r\n    <h2>{title}</h2>\r\n    {children}\r\n  </div>\r\n);\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\n\r\nconst Notification = () => <p>No feedback given</p>;\r\nexport default Notification;\r\n","import React, { Component } from \"react\";\r\nimport Statistics from \"./Statistic/Statistic\";\r\nimport FeedbackOptions from \"./FeedbackOptions/FeedbackOptions\";\r\nimport Section from \"./Section/Section\";\r\nimport Notification from \"./Notification/Notification\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n    total: 0,\r\n    positive: 0,\r\n  };\r\n\r\n  handleFn = (e) => {\r\n    this.setState((prevState) => {\r\n      if (e.target.textContent === \"Good\") {\r\n        return {\r\n          good: prevState.good + 1,\r\n        };\r\n      }\r\n      if (e.target.textContent === \"Neutral\") {\r\n        return {\r\n          neutral: prevState.neutral + 1,\r\n        };\r\n      }\r\n      return {\r\n        bad: prevState.bad + 1,\r\n      };\r\n    });\r\n    this.countTotalFeedback();\r\n    this.countPositiveFeedbackPercentage();\r\n  };\r\n\r\n  countTotalFeedback = () =>\r\n    this.setState((prevState) => {\r\n      return {\r\n        total: prevState.good + prevState.neutral + prevState.bad,\r\n      };\r\n    });\r\n\r\n  countPositiveFeedbackPercentage = () => {\r\n    this.setState(({ good, total }) => {\r\n      return {\r\n        positive: Math.round((good / total) * 100),\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Section title=\"Please leave feedback\">\r\n          <FeedbackOptions onHandleFn={this.handleFn} />\r\n        </Section>\r\n\r\n        <Section title=\"Statistics\">\r\n          {this.state.total === 0 ? (\r\n            <Notification />\r\n          ) : (\r\n            <Statistics\r\n              good={this.state.good}\r\n              neutral={this.state.neutral}\r\n              bad={this.state.bad}\r\n              total={this.state.total}\r\n              positive={this.state.positive}\r\n            />\r\n          )}\r\n        </Section>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./Components/App/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}